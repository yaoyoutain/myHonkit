{"./":{"url":"./","title":"首页","keywords":"","body":"我的知识库 [x] honkit [ ] go [ ] node.js [ ] python [ ] vue ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:40:43 "},"doc/honkit/安装.html":{"url":"doc/honkit/安装.html","title":"honkit安装","keywords":"","body":"honkit安装 下载node.js 地址 下载honkit npm install honkit // 初始化 会自动创建summary(文件左侧菜单结构), readme(首页文件)文件 //可以根据summary 自动创建文件夹和文件 npm honkit init // 生成_book文件 npx honkit build // 预览网站 npx honkit serve // 打包成pdf npx honkit pdf 简化命令 在package.json 文件中增加 { \"scripts\": { \"build\": \"npx honkit build\", \"serve\": \"npx honkit serve\", \"book\": \"npx honkit init\", \"pdf\": \"npx honkit pdf\" } } ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-03-27 14:32:03 "},"doc/honkit/插件.html":{"url":"doc/honkit/插件.html","title":"honkit插件","keywords":"","body":"honkit插件 配置插件 在book.json中配置插件 plugins中配置插件名，pluginsConfig中配置插件信息 plugins中插件名前加-，表示取消插件(默认配置了5个插件) 安装插件 npm install gitbook-plugin-[插件名] 插件介绍 名称 介绍 highlight 语法高亮插件，代码高亮功能 search 搜索插件，不支持中文搜索 sharing 分享插件，右上角分享功能 font-settings 字体设置（最上方的\"A\"符号） livereload 热加载插件，为 GitBook 编辑进行实时重新预览加载 其他插件 expandable-chapters-small 子目录折叠 chapter-fold 子目录折叠，和expandable-chapters-small一起使用 get-pdf 下载pdf按钮 base 文件目录，prefix 文件名,label 下载按钮名称 \"get-pdf\":{ \"base\": \"/summary/assets\", \"prefix\": \"book\", \"label\": \"下载 PDF\" } code 代码块复制按钮+代码行号 \"code\":{ \"copyButtons\": true } search-pro 搜索栏 tbfed-pagefooter 页脚信息 \"tbfed-pagefooter\": { \"copyright\":\"©2025 xxxxx\", \"modify_label\": \"该文档修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } flexible-alerts 对提示框的增强。NOTE,TIP,WARNING,DANGER ``` [!NOTE] 这是一个提示框。 [!WARNING] 这是一个警告框。 [!TIP] 这是一个提示框。 [!DANGER] 这是一个危险框。 * anchor-navigation-ex 添加 Toc 到侧边悬浮导航以及回到顶部按钮。需要注意以下两点：本插件只会提取 h1,h2,h3 标签作为悬浮导航 \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"showGoTop\": true, \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } * github@2.0.0 添加 github 图标 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } * sectionx 页面分块 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } * 3-ba 百度统计 百度统计插件 { \"plugins\": [\"3-ba\"], \"pluginsConfig\": { \"3-ba\": { \"token\": \"xxxxxxxx\" } } } ``` 启动以后，可以在浏览器中用 F12 看一下源代码是否包含如下片段：https://hm.baidu.com/hm.js ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-03-27 15:14:14 "},"doc/honkit/插件使用.html":{"url":"doc/honkit/插件使用.html","title":"honkit插件使用","keywords":"","body":"插件使用 code 代码复制 import { useStore } from 'vuex' import { computed } from 'vue' const store = useStore() flexible-alerts 对提示框的增强 [!NOTE] 这是一个提示框。 Info flat [!WARNING] 这是一个警告框。 Info flat [!TIP] 这是一个提示框。 Info flat [!DANGER] 这是一个危险框。 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-03-27 15:29:05 "},"doc/后端/后端.html":{"url":"doc/后端/后端.html","title":"后端","keywords":"","body":"后端 mysql go net git nginx redis liunx ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:08:35 "},"doc/后端/mysql/mysql.html":{"url":"doc/后端/mysql/mysql.html","title":"mysql","keywords":"","body":"mysql 目录 基础 sql分类 字段冗余性设计 其他 其他 基础 sql分类 分类 说明 DDl 数据库定义语言，用来定义数据库对象（数据库， 表，字段） DML 数据库操作语言， 增删改 DQL 数据库查询语言 DCL 数据控制语言， 用来创建数据库用户，权限 字段冗余性设计 优点： 比如name就可以冗余在 表里， 这样当只需要name的时候可以避免多次的 去查询其他表。 缺点: 数据时效性没有这么强。 其他 mysql 初步安装 msyql 命令 DML 数据库操作语言 DDL 数据定义语言 DQL 数据库查询语言 DCL 数据控制语言 函数 mysql 数据类型 约束 事务 其他 存储引擎 索引 sql优化 mysql 规范 mysql 主从搭建 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:02:41 "},"doc/后端/go/go.html":{"url":"doc/后端/go/go.html","title":"go","keywords":"","body":"go 目录 基础 常用包 框架 基础 数组，切片的 curd 字典map的 接口和反射 goroutine channel 常用包 文件读取 时间处理 字符串处理 xml,json 处理 正则处理 锁和sync 网络处理 logrus gorm xorm sqlx 框架 gin git 持续集成发布 redis ,etcd docker grpc 技巧 基础知识点 IO os gc工作原理 database 入门 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:02:40 "},"doc/后端/git/git.html":{"url":"doc/后端/git/git.html","title":"git","keywords":"","body":"git 目录 git 初步学习 检出仓库 添加和提交 推送改动 分支 更新和合并 解决冲突 标签 替换本地改动 图形化工具 git 提交规范 msg格式 类型 学习地址： git - the simple guide - no deep shit! http://rogerdudler.github.io/git-guide/index.zh.html Git for Windows We bring the awesome Git VCS to Windows https://gitforwindows.org/ 简介： git工作流： work(工作目录) =>Index(暂存区)=> head（最后一次提交结果）=> 推送到远端仓库 work（工作目录）: 就是我们实际操作的 文件 index（暂存区）: 可以理解成缓冲区， 临时保存我们的改动 head : 最后一次提交结果。 git 初步学习 检出仓库 git clone url filePath（路径） 添加和提交 把我们改动的文件提交到index去。 git add //添加指定文件 git add * //添加所有文件 git commit -m \"代码提交信息\" //提交代码到head 推送改动 把我们的head文件推送到远端仓储中 git push origin master //master 是分支 ， 可以替换成自己的分支 分支 分支的作用： 分支是用来分隔我们的代码。 mast 是默认分支， 我们在其他的分支上开发， 完成后再将他们合并到主干上。 git checkout -b feature_x //创建feature_x 分支 git checkout master //切回分支 git branch -d feature_x //删除分支 git push origin //推送分支到远端仓库 更新和合并 git pull // 拉取并更新本地仓库至最新改动 git merge //合并分支 解决冲突 以上更新和合并可能会出现冲突 ， 这个时候就需要我们手动解决冲突,改完后，我们需要执行 git add //提交 git diff //查看差异 标签 git tag 1.0.0 提交id // 在提交id创建一个标签名为1.0.0 git log // 查看提交id git push origin 标签名 //推送标签名 git tag // 列出本地标签 替换本地改动 git checkout -- //丢弃work 中的改动 图形化工具 Sourcetree | Free Git GUI for Mac and Windows A Git GUI that offers a visual representation of your repositories. Sourcetree is a free Git client for Windows and Mac. https://www.sourcetreeapp.com/ git 提交规范 msg格式 [可选的作用域]: [可选的正文] [可选的脚注] 类型 # 主要type feat: 增加新功能 fix: 修复bug # 特殊type docs: 只改动了文档相关的内容 style: 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号 build: 构造工具的或者外部依赖的改动，例如webpack，npm refactor: 代码重构时使用 revert: 执行git revert打印的message # 暂不使用type test: 添加测试或者修改现有测试 perf: 提高性能的改动 ci: 与CI（持续集成服务）有关的改动 chore: 不修改src或者test的其余修改，例如构建过程或辅助工具的变动 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:02:40 "},"doc/后端/nginx/nginx.html":{"url":"doc/后端/nginx/nginx.html","title":"nginx","keywords":"","body":"nginx 目录 简介 核心文件路径 关键字 安装 windows liunx docker 命令 配置文件结构 负载均衡策略 轮询 加权轮询 最少链接 加权最少链接 ip_hash 普通hash 应用 静态站点 文件服务器 vscode 配置 简介 nginx [engine x] 是一个 HTTP 和反向代理服务器， 邮件代理服务器， 和一个通用的 TCP/UDP 代理服务器， 最初由伊戈尔·西索耶夫撰写。 基本的 HTTP 服务器功能 其他http服务器功能 邮件代理服务器功能 TCP/UDP代理服务器功能 体系结构和可伸缩性 核心文件路径 # 配置文件存放目录 /etc/nginx # 主配置文件 /etc/nginx/conf.d # 程序默认存放位置 /usr/share/nginx/html # 日志默认位置 /var/log/nginx nginx https://nginx.org/en/ 关键字 正向代理， 反向代理， 负载均衡： 轮询，加权轮重，ip hash 动静分离 安装 nginx: download https://nginx.org/en/download.html windows nginx-1.22.1.zip liunx docker # ./conf.d 文件夹下创建default.conf server { listen 80; listen [::]:80; server_name localhost; location / { root /usr/share/nginx/html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } version: '3' services: myNginx: image: nginx:latest volumes: - ./conf.d:/etc/nginx/conf.d - ./html:/usr/share/nginx/html - ./log:/var/log/nginx container_name: myNginx ports: - 80:80 restart: always 命令 nginx 启动 nginx -s stop 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。 nginx -s quit 平稳关闭Nginx，保存相关信息，有安排的结束web服务。 nginx -s reload 因改变了Nginx相关配置，需要重新加载配置而重载。 nginx -s reopen 重新打开日志文件。 nginx -c filename 为 Nginx 指定一个配置文件，来代替缺省的。 nginx -t 不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。 nginx -v 显示 nginx 的版本。 nginx -V 显示 nginx 的版本，编译器版本和配置参数。 配置文件结构 全局配置 events { worker_connections 1024; } http { http 配置 upstream xx{ server ip weight=1(权重); //负载均衡 ： 服务器资源 } server { listen 8080; server_name localhost; //代理 location / { root html; index index.html index.htm; proxy_pass 协议+xx; } } server { listen 8080; server_name localhost; //代理 location / { root html; index index.html index.htm; proxy_pass 协议+xx; } } } 示例 #运行用户 #user nobody; #启动进程,通常设置成和cpu的数量相等 worker_processes 1; #启动进程,通常设置成和cpu的数量相等 #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #PID文件，记录当前启动的nginx的进程ID #pid logs/nginx.pid; #工作模式及连接数上限 events { worker_connections 1024;#单个后台worker process进程的最大并发链接数 } #设定http服务器，利用它的反向代理功能提供负载均衡支持 http { #设定mime类型(邮件支持类型),类型由mime.types文件定义 include mime.types; default_type application/octet-stream; #设定日志 #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用， #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime. sendfile on; #tcp_nopush on; #连接超时时间 #keepalive_timeout 0; keepalive_timeout 65; #gzip压缩开关 #gzip on; #设定实际的服务器列表 upstream test{ #weigth参数表示权值，权值越高被分配到的几率越大 server 127.0.0.1:8080 weight=1; server 127.0.0.1:8081 weight=1; } #HTTP服务器 server { #监听80端口，80端口是知名端口号，用于HTTP协议 listen 80; #定义使用www.xx.com访问 server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { #指向webapp的目录 #root的处理结果是：root路径＋location路径 #alias的处理结果是：使用alias路径替换location路径 root html; alias html; #首页 index index.html index.htm; #反向代理的路径（和upstream绑定），location 后面设置映射的路径 proxy_pass http://test; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ { # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} #禁止访问 .htxxx 文件 # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht { # deny all; #} } # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } #} } 负载均衡策略 轮询 加权轮询 最少链接 加权最少链接 ip hash 普通hash 轮询 upstream bck_testing_01 { # 默认所有服务器权重为 1 server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080 } 加权轮询 upstream bck_testing_01 { server 192.168.250.220:8080 weight=3 server 192.168.250.221:8080 # default weight=1 server 192.168.250.222:8080 # default weight=1 } 最少链接 分配给最少链接的服务器 upstream bck_testing_01 { least_conn; # with default weight for all (weight=1) server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080 } 加权最少链接 upstream bck_testing_01 { least_conn; server 192.168.250.220:8080 weight=3 server 192.168.250.221:8080 # default weight=1 server 192.168.250.222:8080 # default weight=1 } ip_hash upstream bck_testing_01 { ip_hash; # with default weight for all (weight=1) server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080 } 普通hash upstream bck_testing_01 { hash $request_uri; # with default weight for all (weight=1) server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080 } 应用 多个webapp配置 静态站点 文件服务器 静态站点 html 文件和一堆静态资源 server { listen 8090; server_name localhost; location / { root C:/Users/24514/Desktop/nginx/html; index home.html home.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } 文件服务器 Nginx 中的配置要点： 将 autoindex 开启可以显示目录，默认不开启。 将 autoindex_exact_size 开启可以显示文件的大小。 将 autoindex_localtime 开启可以显示文件的修改时间。 root 用来设置开放为文件服务的根路径。 charset 设置为 charset utf-8,gbk;，可以避免中文乱码问题（windows 服务器下设置后，依然乱码，本人暂时没有找到解决方法）。 autoindex on;# 显示目录 autoindex_exact_size on;# 显示文件大小 autoindex_localtime on;# 显示文件时间 server { charset utf-8,gbk; # windows 服务器下设置后，依然乱码，暂时无解 listen 9050 default_server; listen [::]:9050 default_server; server_name _; root /share/fs; } vscode 配置 nginx获取用户真实ip 高级nginx ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:02:41 "},"doc/前端/前端.html":{"url":"doc/前端/前端.html","title":"前端","keywords":"","body":"前端 html css js ts vue 项目工程 element ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:09:33 "},"doc/前端/html/html.html":{"url":"doc/前端/html/html.html","title":"html","keywords":"","body":"html 目录 html 元素 剖析 HTML 文档 块级元素和内联元素 块级元素 内联元素 空元素 html 头元信息 设置语言 显示字符集 显示图标 其他类型元数据 seo 引入css 和js 注意点 元素 HTML（HyperText Markup Language，超文本标记语言）是一种用来告知浏览器如何组织页面的_标记语言_。HTML 可复杂、可简单，一切取决于 web 开发者。HTML 由一系列的元素组成，这些元素可以用来包围或_标记_不同部分的内容，使其以某种方式呈现或者工作。两端的标签可以使内容变成超链接，以连接到另一个页面；使字体表现为斜体等。 html 元素 剖析 HTML 文档 我的测试站点 这是我的页面 : 声明文档类型。早期的 HTML（大约 1991-1992 年）文档类型声明类似于链接，规定了 HTML 页面必须遵从的良好规则，能自动检测错误和其他有用的东西。文档类型使用类似于这样： HTMLCopy to Clipboard \\http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> 文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 是最短的有效文档声明！ : \">\\ 元素。这个元素包裹了页面中所有的内容，有时被称为根元素。 : \">\\ 元素。这个元素是一个容器，它包含了所有你想包含在 HTML 页面中但不在 HTML 页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述、CSS 样式、字符集声明等等。以后的章节中会学到更多相关的内容。 : \">\\ 元素。这个元素代表了不能由其他 HTML 元相关元素表示的元数据，比如 \">\\、\">\\、\">\\、\">\\ 或 \">\\。charset 属性将你的文档的字符集设置为 UTF-8，其中包括绝大多数人类书面语言的大多数字符。有了这个设置，页面现在可以处理它可能包含的任何文本内容。没有理由不对它进行设置，它可以帮助避免以后的一些问题。 : \">\\ 元素。这设置了页面的标题，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面。 : \">\\ 元素。包含了你访问页面时_所有_显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。 7. 块级元素和内联元素 在 HTML 中有两种你需要知道的重要元素类别，块级元素和内联元素。 块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。例如，一个块级元素可能代表标题、段落、列表、导航菜单或页脚。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。 内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。它通常与文本一起使用，例如，\">\\ 元素创建一个超链接，\">\\ 和 \">\\ 等元素创建强调。 空元素，不是所有元素都拥有开始标签、内容和结束标签。一些元素只有一个标签，通常用来在此元素所在位置插入/嵌入一些东西。这些元素被称为空元素。例如：元素 \">\\ 是用来在页面插入一张指定的图片。 块级元素 内联元素 空元素 html 头元信息 我的测试页面 这是我的页面 HTML 头部包含 HTML \\ 元素的内容，与 \\ 元素内容不同，页面在浏览器加载后它的内容不会在浏览器中显示，它的作用是保存页面的一些元数据 设置语言 显示字符集 显示图标 其他类型元数据 添加作者和描述 ```html 2. 网站提供了更丰富的元数据 ```html seo 引入css 和js 注意点 html 不区分大小写 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:48:08 "},"doc/前端/css/css.html":{"url":"doc/前端/css/css.html","title":"css","keywords":"","body":"css 目录 什么是css 选择器 属性选择器 子字符选择器 伪类伪元素 伪类 伪元素 关系选择器 CSS：一切皆盒子 层叠和继承 优先级： 继承 flex 什么是css 引用css 也就是 和 标签之间 和 HTML 类似，CSS 也不是真正的编程语言，甚至不是标记语言。CSS 是一门样式表语言，这也就是说人们可以用它来选择性地为 HTML 元素添加样式。 选择器（Selector） HTML 元素的名称位于规则集开始。它选择了一个或多个需要添加样式的元素（在这个例子中就是 \">\\ 元素）。要给不同元素添加样式，只需要更改选择器。 声明（Declaration） 一个单独的规则，如 color: red; 用来指定添加样式元素的属性。 属性（Properties） 改变 HTML 元素样式的途径（本例中 color 就是 \">\\ 元素的属性）。CSS 中，由编写人员决定修改哪个属性以改变规则。 属性的值（Property value） 在属性的右边，冒号后面即属性的值，它从指定属性的众多外观中选择一个值（我们除了 red 之外还有很多属性值可以用于 color ）。 注意其他重要的语法： 除了选择器部分，每个规则集都应该包含在成对的大括号里（{}）。 在每个声明里要用冒号（:）将属性与属性值分隔开。 在每个规则集里要用分号（;）将各个声明分隔开。 选择多个用逗号分开 选择器 选择器名称 选择的内容 示例 元素选择器（也称作标签或类型选择器） 所有指定类型的 HTML 元素 p选择 ID 选择器 具有特定 ID 的元素。单一 HTML 页面中，每个 ID 只对应一个元素，一个元素只对应一个 ID #my-id选择 或 类选择器 具有特定类的元素。单一页面中，一个类可以有多个实例 .my-class选择 和 属性选择器 拥有特定属性的元素 img[src]选择 但不是 伪类选择器 特定状态下的特定元素（比如鼠标指针悬停于链接之上） a:hover选择仅在鼠标指针悬停在链接上时的 元素 属性选择器 选择器 示例 描述 [_attr_] a[title] 匹配带有一个名为_attr_的属性的元素——方括号里的值。 [_attr_=_value_] a[href=\"https://example.com\"] 匹配带有一个名为_attr_的属性的元素，其值正为_value_——引号中的字符串。 [_attr_~=_value_] p[class~=\"special\"] 匹配带有一个名为_attr_的属性的元素，其值正为_value_，或者匹配带有一个_attr_属性的元素，其值有一个或者更多，至少有一个和_value_匹配。 注意，在一列中的好几个值，是用空格隔开的。 `[attr\\ =value]` `div[lang\\ =\"zh\"]` 匹配带有一个名为_attr_的属性的元素，其值可正为_value_，或者开始为_value_，后面紧随着一个连字符。 子字符选择器 选择器 示例 描述 [attr^=value] li[class^=\"box-\"] 匹配带有一个名为_attr_的属性的元素，其值开头为_value_子字符串。 [attr$=value] li[class$=\"-box\"] 匹配带有一个名为_attr_的属性的元素，其值结尾为_value_子字符串 [attr*=value] li[class*=\"box\"] 匹配带有一个名为_attr_的属性的元素，其值的字符串中的任何地方，至少出现了一次_value_子字符串。 伪类伪元素 伪类就是开头为冒号的关键字： :pseudo-class-name 伪元素开头为双冒号:: ::pseudo-element-name 伪类 选择器 描述 :active 在用户激活（例如点击）元素的时候匹配。 :any-link 匹配一个链接的:link和:visited状态。 :blank 匹配空输入值的\">\\元素。 :checked 匹配处于选中状态的单选或者复选框。 :current (en-US) 匹配正在展示的元素，或者其上级元素。 :default 匹配一组相似的元素中默认的一个或者更多的 UI 元素。 :dir 基于其方向性（HTMLdir属性或者 CSSdirection属性的值）匹配一个元素。 :disabled 匹配处于关闭状态的用户界面元素 :empty 匹配除了可能存在的空格外，没有子元素的元素。 :enabled 匹配处于开启状态的用户界面元素。 :first 匹配分页媒体的第一页。 :first-child 匹配兄弟元素中的第一个元素。 :first-of-type 匹配兄弟元素中第一个某种类型的元素。 :focus 当一个元素有焦点的时候匹配。 :focus-visible 当元素有焦点，且焦点对用户可见的时候匹配。 :focus-within 匹配有焦点的元素，以及子代元素有焦点的元素。 :future (en-US) 匹配当前元素之后的元素。 :hover 当用户悬浮到一个元素之上的时候匹配。 :indeterminate 匹配未定态值的 UI 元素，通常为复选框。 :in-range 用一个区间匹配元素，当值处于区间之内时匹配。 :invalid 匹配诸如的位于不可用状态的元素。 :lang 基于语言（HTMLlang属性的值）匹配元素。 :last-child 匹配兄弟元素中最末的那个元素。 :last-of-type 匹配兄弟元素中最后一个某种类型的元素。 :left 在分页媒体中，匹配左手边的页。 :link 匹配未曾访问的链接。 :local-link (en-US) 匹配指向和当前文档同一网站页面的链接。 :is() 匹配传入的选择器列表中的任何选择器。 :not 匹配作为值传入自身的选择器未匹配的物件。 :nth-child 匹配一列兄弟元素中的元素——兄弟元素按照_an+b_形式的式子进行匹配（比如 2n+1 匹配元素 1、3、5、7 等。即所有的奇数个）。 :nth-of-type 匹配某种类型的一列兄弟元素（比如，元素）——兄弟元素按照_an+b_形式的式子进行匹配（比如 2n+1 匹配元素 1、3、5、7 等。即所有的奇数个）。 :nth-last-child 匹配一列兄弟元素，从后往前倒数。兄弟元素按照_an+b_形式的式子进行匹配（比如 2n+1 匹配按照顺序来的最后一个元素，然后往前两个，再往前两个，诸如此类。从后往前数的所有奇数个）。 :nth-last-of-type 匹配某种类型的一列兄弟元素（比如，元素），从后往前倒数。兄弟元素按照_an+b_形式的式子进行匹配（比如 2n+1 匹配按照顺序来的最后一个元素，然后往前两个，再往前两个，诸如此类。从后往前数的所有奇数个）。 :only-child 匹配没有兄弟元素的元素。 :only-of-type 匹配兄弟元素中某类型仅有的元素。 :optional 匹配不是必填的 form 元素。 :out-of-range 按区间匹配元素，当值不在区间内的的时候匹配。 :past (en-US) 匹配当前元素之前的元素。 :placeholder-shown 匹配显示占位文字的 input 元素。 :playing 匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“播放”的元素。 :paused 匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“暂停”的元素。 :read-only 匹配用户不可更改的元素。 :read-write 匹配用户可更改的元素。 :required 匹配必填的 form 元素。 :right 在分页媒体中，匹配右手边的页。 :root 匹配文档的根元素。 :scope 匹配任何为参考点元素的的元素。 :valid 匹配诸如元素的处于可用状态的元素。 :target 匹配当前 URL 目标的元素（例如如果它有一个匹配当前URL 分段的元素）。 :visited 匹配已访问链接。 :where 条件 伪元素 选择器 描述 ::after 匹配出现在原有元素的实际内容之后的一个可样式化元素。 ::before 匹配出现在原有元素的实际内容之前的一个可样式化元素。 ::first-letter 匹配元素的第一个字母。 ::first-line 匹配包含此伪元素的元素的第一行。 ::grammar-error 匹配文档中包含了浏览器标记的语法错误的那部分。 ::selection 匹配文档中被选择的那部分。 ::spelling-error 匹配文档中包含了浏览器标记的拼写错误的那部分。 关系选择器 选择器 描述 空格（\" \"）字符——组合两个选择器 body article p 后代选择器 article > p 子代关系选择器是个大于号（>），只会在选择器选中直接子元素的时候匹配 p + img 邻接兄弟选择器（+）用来选中恰好处于另一个在继承关系上同级的元素旁边的物件 p ~ img 通用兄弟， 选中一个元素的兄弟元素，即使它们不直接相邻 CSS：一切皆盒子 编写 CSS 时你会发现，你的工作好像是围绕着一个一个盒子展开的——设置尺寸、颜色、位置，等等。页面里大部分 HTML 元素都可以被看作若干层叠的盒子。 padding（内边距）：是指内容周围的空间。在下面的例子中，它是段落文本周围的空间。 border（边框）：是紧接着内边距的线。 margin（外边距）：是围绕元素边界外侧的空间。 层叠和继承 优先级： 上到下， 先具体后大概 想同权重，则是后面的应用 !importer 最高优先级 继承 inherit设置该属性会使子元素属性和父元素相同。实际上，就是“开启继承”。 initial将应用于选定元素的属性值设置为该属性的初始值。 revert (en-US)将应用于选定元素的属性值重置为浏览器的默认样式，而不是应用于该属性的默认值。在许多情况下，此值的作用类似于 unset。 revert-layer (en-US)将应用于选定元素的属性值重置为在上一个层叠层中建立的值。 unset将属性重置为自然值，也就是如果属性是自然继承那么就是 inherit，否则和 initial 一样 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:48:08 "},"doc/前端/js/js.html":{"url":"doc/前端/js/js.html","title":"js","keywords":"","body":"js 目录 入门 入口函数 js的数据类型 查看数据类型 类型转换 字符串 数组 对象 函数 js 选择器 事件 dom操作 节点关系 节点操作方法 dom 操作html dom操作css dom 中表单与属性操作 属性操作 其他 时间 json 原生 JavaScript 教程 - 长乐未央 https://clwy.cn/guide/documents/javascript-clwy 入门 入口函数 // 当所有文件都已经加载完毕 window.onload = function(){ //其他代码放在这里 } // 按照顺序加载 function welcome(){ alert('欢迎光临长乐未央~'); } js的数据类型 字符串string 数字 number 布尔 Boolean 空 null 未定义 undefined 符号 查看数据类型 // 字符串 var txt = \"欢迎光临\"; console.log(typeof txt); 类型转换 // 转字符串 string(变量) //转数字 parseInt() //转浮点 parseFloat() 字符串 属性或方法 意义 length 属性 长度 charAt 所在位置的字符串 charCodeAt 所在位置字符串的字符编码 concat 拼接多个字符，实际常用 + 拼接 slice 截取 substr 截取 substring 截取 indexOf 字符串所在索引位置 lastIndexOf 从后向前搜索字符串，找到索引位置 trim 去除空格 toLowerCase 转小写 toUpperCase 转大写 split 字符串分割成数组 数组 var cars = [\"Saab\", \"Volvo\", \"BMW\"]; 方法 意义 join 数组连接成字符串 push 从后面推入 unshift 从前面推入 pop 取得并删除最后一项 shift 取得并删除第一项 reverse 反转 sort 排序 concat 连接数组 slice 将数组的一部分复制成新数组 splice 修改数组 (删除、修改、新增) indexOf、lastIndexOf 取得索引值 forEach 遍历数组 map 遍历并返回新数组 对象 创建 // 1. 声明对象 var obj = {} // 2. 构造函数创建 var x = new Object() 定义 // 1 var person = { name: '刘备', age: 29 } // 2 var person = new Object(); person.name = '刘备'; person.age = 29; 函数 // 定义函数 function hello(x) { return \"hello world\"+x; } //执行 hello(); //我就是开关 js 选择器 代码 意义 document.getElementsByTagName 标签选择器 document.getElementById ID 选择器 document.getElementsByClassName Class 选择器 document.getElementsByName 选取带有指定 name 属性的元素 (不常用) document.querySelector HTML5 中新加入的，接受一个 CSS 选择符，只匹配第一个 document.querySelectorAll HTML5 中新加入的， 匹配所有元素 事件 事件 意义 onclick 鼠标单击 ondblclick 鼠标双击 onkeyup 按下并释放键盘上的一个键时触发 onchange 文本内容或下拉菜单中的选项发生改变 onfocus 获得焦点，表示文本框等获得鼠标光标 onblur 失去焦点 onmouseover 鼠标悬停 onmouseout 鼠标移出 onload 网页文档加载事件 onunload 关闭网页时 onsubmit 表单提交事件 onreset 重置表单时 e.stopPropagation() 阻止事件冒泡 // 添加点击事件 btn.addEventListener(\"click\", getMaxByTreeNum); dom操作 方法 意义 createElement 创建元素节点 createTextNode 创建文本节点 节点关系 方法 意义 children 子元素节点，不包含换行等 childNodes 子节点，包含文本、换行等 parentNode 父节点，注意是单数 previousSibling 前一个同辈节点，包括文本节点、注释节点即回车、换行、空格、文本等 previousElementSibling 前一个同辈节点，不包括文本节点、注释节点 nextSibling 后一个同辈节点，包括文本节点、注释节点即回车、换行、空格、文本等 nextElementSibling 后一个同辈节点，不包括文本节点、注释节点等 firstChild 第一个子节点，包含文本 firstElementChild 第一个子节点，不包含文本 lastChild 最后一个子节点，包含文本 lastElementChild 最后一个子节点，不包含文本 节点操作方法 方法 意义 appendChild() 在最后面追加 insertBefore() 参数 1: 要插入的节点 参数 2: 作为参照的节点，如果为 null，与 appendChild 效果相同 replaceChild() 替换节点 参数 1: 要插入的节点 参数 2: 要替换的节点 removeChild() 移除节点 参数: 要移除的节点 cloneNode() 复制节点 参数（可选）：true，克隆时包含子元素 dom 操作html 方法 意义 innerHTML 修改元素内部 HTML outerHTML 获取、修改整个元素的 HTML innerText 修改元素内部文本 outerText 获取、修改整个元素的文本 insertAdjacentHTML(插入位置， html 内容) 插入新的 html dom操作css dom中有个集合：classList var demo = document.getElementById(\"demo\"); console.log(demo.classList); // 新增class demo.classList.add('ghost'); // 删除class demo.classList.remove('big'); // 切换class demo.classList.toggle('blue'); // 是否包含class console.log(demo.classList.contains('blue')); dom 中表单与属性操作 var username = document.getElementById(\"username\"); // 取值 console.log(username.value); // 设置值 user.value = \"pipi\"; 属性操作 方法 意义 getAttribute 得到属性 setAttribute 设置属性 removeAttribute 移除属性 其他 时间 方法 意义 Date() 返回当日的日期和时间。 getDate() 从 Date 对象返回一个月中的某一天 (1~ 31)。 getDay() 从 Date 对象返回一周中的某一天 (0~ 6)。 getMonth() 从 Date 对象返回月份 (0~ 11)。 getFullYear() 从 Date 对象以四位数字返回年份。 getYear() 请使用 getFullYear() 方法代替。 getHours() 返回 Date 对象的小时 (0~ 23)。 getMinutes() 返回 Date 对象的分钟 (0~ 59)。 getSeconds() 返回 Date 对象的秒数 (0~ 59)。 getMilliseconds() 返回 Date 对象的毫秒 (0~ 999)。 getTime() 返回 1970 年 1 月 1 日至今的毫秒数。 getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差。 getUTCDate() 根据世界时从 Date 对象返回月中的一天 (1~ 31)。 getUTCDay() 根据世界时从 Date 对象返回周中的一天 (0~ 6)。 getUTCMonth() 根据世界时从 Date 对象返回月份 (0~ 11)。 getUTCFullYear() 根据世界时从 Date 对象返回四位数的年份。 getUTCHours() 根据世界时返回 Date 对象的小时 (0~ 23)。 getUTCMinutes() 根据世界时返回 Date 对象的分钟 (0~ 59)。 getUTCSeconds() 根据世界时返回 Date 对象的秒钟 (0~ 59)。 getUTCMilliseconds() 根据世界时返回 Date 对象的毫秒 (0~ 999)。 parse() 返回 1970 年 1 月 1 日午夜到指定日期（字符串）的毫秒数。 setDate() 设置 Date 对象中月的某一天 (1~ 31)。 setMonth() 设置 Date 对象中月份 (0~ 11)。 setFullYear() 设置 Date 对象中的年份（四位数字）。 setYear() 请使用 setFullYear() 方法代替。 setHours() 设置 Date 对象中的小时 (0~ 23)。 setMinutes() 设置 Date 对象中的分钟 (0~ 59)。 setSeconds() 设置 Date 对象中的秒钟 (0~ 59)。 setMilliseconds() 设置 Date 对象中的毫秒 (0~ 999)。 setTime() 以毫秒设置 Date 对象。 setUTCDate() 根据世界时设置 Date 对象中月份的一天 (1~ 31)。 setUTCMonth() 根据世界时设置 Date 对象中的月份 (0~ 11)。 setUTCFullYear() 根据世界时设置 Date 对象中的年份（四位数字）。 setUTCHours() 根据世界时设置 Date 对象中的小时 (0~ 23)。 setUTCMinutes() 根据世界时设置 Date 对象中的分钟 (0~ 59)。 setUTCSeconds() 根据世界时设置 Date 对象中的秒钟 (0~ 59)。 setUTCMilliseconds() 根据世界时设置 Date 对象中的毫秒 (0~ 999)。 toSource() 返回该对象的源代码。 toString() 把 Date 对象转换为字符串。 toTimeString() 把 Date 对象的时间部分转换为字符串。 toDateString() 把 Date 对象的日期部分转换为字符串。 toGMTString() 请使用 toUTCString() 方法代替。 toUTCString() 根据世界时，把 Date 对象转换为字符串。 toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串。 toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串。 toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串。 UTC() 根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。 valueOf() 返回 Date 对象的原始值。 json 函数 描述 JSON.parse() 用于将一个 JSON 字符串转换为 JavaScript 对象。 JSON.stringify() 用于将 JavaScript 值转换为 JSON 字符串。 js 执行机制 同步任务 从上到下 异步任务 宏任务 script(整体代码)、setTimeout、setInterval、UI交互事件、postMessage、Ajax 微任务 Promise.then catch finally、MutaionObserver、process.nextTick(Node.js 环境) 所有的同步任务都是在主进程执行的形成一个执行栈，主线程之外，还存在一个\"任务队列\"， 异步任务执行队列中先执行宏任务，然后清空当次宏任务中的所有微任务， 然后进行下一个tick如此形成循环。 NextTaick 创建一个异步任务 。 {{ inputA }} import { ref, nextTick } from 'vue'; let inputA = ref(\"测试\") let div = ref() const change = async () => { inputA.value = \"测试ADS\" await nextTick() // 没有await nexTick ：测试 // 测试ADS console.log(div.value?.innerText); } ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:53:32 "},"doc/前端/ts/ts.html":{"url":"doc/前端/ts/ts.html","title":"ts","keywords":"","body":"ts [toc] 入门 # 安装ts npm install typescript -g 类型 变量声明 let valName :(type)=val 基础类型(type) TS是JS的超集，所以JS基础的类型都包含在内 | 来支持多种类型 any： 任意类型 string ：字符串 ( ` ` ) 可以用来嵌套文本和表达式 number ： 数字 双精度 64 位浮点值 boolean ： 布尔 [] 数组类型： number[]，Array\\ 元组： 也是数组的一种， 只不过里面的各个元素类型可能不同 let x: [string, number] enum ： 枚举 ，enum Color {Red, Green, Blue}; void ：空 null ： 空 undefined ： 用于初始化变量为一个未定义的值 never ：其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。 注意： void 和 undefined 和 null 最大的区别 与 void 的区别是，undefined 和 null 是所有类型的子类型。 任意类型 any : 类似与c# 中的T : 没有限制哪种类型 unknown ： 顶级类型， any 弊端如果使用any 就失去了TS类型检测的作用 没有限制哪种类型 unknown 不能调用属性和方法 所有类型都可以分配给它 接口 类似于结构体 关键字interface（接口） 使用interface来定义一种约束，让数据的结构满足约束的格式 //定义接口 interface person extends B{ readonly id :number, name string, age? number, [propName:string]any, cb:()=>{ console.log(123) } } interface B{ xxx:string } //定义函数 interface Fn{ (name:string):number[] } const fn:Fn=(name:string)=>{ return [1] } 接口重名会自动重合 任意key ？，readonly 接口继承 extends 定义函数类型 注： 使用接口约束的时候不能多一个属性也不能少一个属性 必须与接口保持一致 数组类型 在类型后面 加上中括号 let valName :(type[])=val 泛型数组： Array\\ arguments 类数组 arguments类数组 function Arr(...args:any): void { console.log(arguments) //ts内置对象IArguments 定义 let arr:IArguments = arguments } Arr(111, 222, 333) //其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是： interface IArguments { [index: number]: any; length: number; callee: Function; } 类型断言 类型断言可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。 值 as 类型 函数 number 对象方法 方法 解释 toFixed() 把数字转换为字符串，并对小数点指定位数。 toLocaleString() 把数字转换为字符串，使用本地数字格式顺序。 toPrecision() 把数字格式化为指定的长度。 toString() 把数字转换为字符串，使用指定的基数。数字的基数是 2 ~ 36 之间的整数。若省略该参数，则使用基数 10。 valueOf() 返回一个 Number 对象的原始数字值。 string 对象方法 属性 length 返回字符串的长度。 prototype 允许您向对象添加属性和方法。 方法 charAt() 返回在指定位置的字符。 charCodeAt() 返回在指定的位置的字符的 Unicode 编码。 concat() 连接两个或更多字符串，并返回新的字符串。 indexOf() 返回某个指定的字符串值在字符串中首次出现的位置。 lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。 localeCompare() 用本地特定的顺序来比较两个字符串 match() 查找找到一个或多个正则表达式的匹配。 replace() 替换与正则表达式匹配的子串 search() 检索与正则表达式相匹配的值 slice() 提取字符串的片断，并在新的字符串中返回被提取的部分 split() 把字符串分割为子字符串数组。 substr() 从起始索引号提取字符串中指定数目的字符。 substring() 提取字符串中两个指定的索引号之间的字符。 toLocaleLowerCase() 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射。 toLocaleUpperCase() 据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射。 toLowerCase() 把字符串转换为小写。 toString() 返回字符串。 valueOf() 返回指定字符串对象的原始值。 toUpperCase() 把字符串转换为大写。 数组 concat() 连接两个或更多的数组，并返回结果。 every() 检测数值元素的每个元素是否都符合条件。 filter() 检测数值元素，并返回符合条件所有元素的数组。 forEach() 数组每个元素都执行一次回调函数。 indexOf() 搜索数组中的元素，并返回它所在的位置。 如果搜索不到，返回值 -1，代表没有此项。 join() 把数组的所有元素放入一个字符串。 lastIndexOf() 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。 map() 通过指定函数处理数组的每个元素，并返回处理后的数组。 pop() 删除数组的最后一个元素并返回删除的元素。 push() 向数组的末尾添加一个或更多元素，并返回新的长度。 reduce() 将数组元素计算为一个值（从左到右）。 reduceRight() 将数组元素计算为一个值（从右到左）。 reverse() 反转数组的元素顺序。 shift() 删除并返回数组的第一个元素。 slice() 选取数组的的一部分，并返回一个新数组。 some() 检测数组元素中是否有元素符合指定条件 sort() 对数组的元素进行排序。 splice() 从数组中添加或删除元素。 toString() 把数组转换为字符串，并返回结果。 unshift() 向数组的开头添加一个或更多元素，并返回新的长度。 接口 interface interface_name { } ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 10:00:49 "},"doc/前端/vue/vue.html":{"url":"doc/前端/vue/vue.html","title":"vue","keywords":"","body":"vue 脚手架 模板语法 响应式 方法 生命周期 组件传参 组件 sort插槽 依赖注入provide inject v-model 自定义命令 自定义hook UI 样式scoped unoCss原子化 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:48:09 "},"doc/前端/项目工程/项目工程.html":{"url":"doc/前端/项目工程/项目工程.html","title":"项目工程","keywords":"","body":"项目工程 vite vue router css reset vite @ 别名 自动引入组件 pinia vue 环境配置 axios 定义全局变量和函数 mock tailwindcss svg ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:48:09 "},"doc/前端/element/element.html":{"url":"doc/前端/element/element.html","title":"element","keywords":"","body":"element el-popover 点击其他区域关闭弹出框 el-table宽度无法自适应 ©2025 瑾语 all right reserved，powered by Gitbook该文档修订时间： 2025-04-07 09:48:08 "}}